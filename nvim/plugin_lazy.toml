# syntax highlighting for toml
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'kat0h/bufpreview.vim'
on_ft = 'markdown'

[[plugins]]
repo = 'vim-skk/eskk.vim'
on_event = 'InsertEnter' 
hook_add = '''
    let g:eskk#directory = '~/.config/eskk'
    let g:eskk#dictionary = {
          \ 'path': '~/.config/eskk/skk-jisyo.utf8'
          \}
    let g:eskk#large_dictionary = {
          \ 'path': '~/.config/eskk/SKK-JISYO.L',
          \}
    let g:eskk#enable_completion = 0
    let g:eskk#no_default_mappings = 0
    let g:eskk#keep_state = 0
    let g:eskk#egg_like_newline = 1
    augroup vimrc_eskk
      autocmd!
      autocmd User eskk-enable-post lmap <buffer> l <Plug>(eskk:disable)
      autocmd User eskk-enable-post lmap <buffer> <C-j> <Plug>(eskk:enable)
      autocmd User eskk-enable-post lmap <buffer> <C-0> <Plug>(eskk:enable)
    augroup END
'''

# [[plugins]]
# repo = 'vim-skk/denops-skkeleton.vim'
# hook_add = '''
#     let s:globalpath = expand('~/.config/eskk/SKK-JISYO.L')
#     let s:userpath = expand('~/.config/eskk/skk-jisyo.utf8')
#     let g:skkeleton#config = {
#           \ 'globalJisyo': s:globalpath,
#           \ 'userJisyo': s:userpath, 
#           \}
#     autocmd User skkeleton-initialize-post imap <C-j> <Plug>(skkeleton-enable)
# '''

# ddc related plugins
# [[plugins]]
# repo = 'Shougo/ddc.vim'
# on_event = 'InsertEnter'
# hook_source = '''
#   source ~/dotfiles/nvim/plugins/ddc.rc.vim
# '''
#
# # ddc-sources
# [[plugins]]
# repo = 'Shougo/ddc-around'
# on_source = 'ddc.vim'
#
# [[plugins]]
# repo = 'delphinus/ddc-tmux'
# on_source = 'ddc.vim'
#
# [[plugins]]
# repo = 'LumaKernel/ddc-file'
# on_source = 'ddc.vim'
#
# # ddc-filters
# [[plugins]]
# repo = 'Shougo/ddc-matcher_head'
# on_source = 'ddc.vim'
#
# [[plugins]]
# repo = 'Shougo/ddc-sorter_rank'
# on_source = 'ddc.vim'
#
# # nvim-lsp
# [[plugins]]
# repo = 'Shougo/ddc-nvim-lsp'
# on_source = 'ddc.vim'
#
# [[plugins]]
# repo = 'matsui54/ddc-nvim-lsp-doc'
# on_source = 'ddc.vim'
# hook_source = '''
#   let g:ddc_nvim_lsp_doc_config = {
#         \ 'documentation': {
#         \    'enable': v:true,
#         \    'border': 'rounded',
#         \    'maxWidth': 100,
#         \    'winblend': 0,
#         \ },
#         \ 'signature': {
#         \    'border': 'rounded',
#         \ },
#         \ }
#   call ddc_nvim_lsp_doc#enable()
# '''
# [[plugins]]
# repo = 'neovim/nvim-lspconfig'
# on_event = 'BufEnter'
# hook_source = '''
# lua << EOF
#   local nvim_lsp = require('lspconfig')
#   local on_attach = function (client, bufnr)
#     local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
#     local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end
#     local opts = { noremap=true, silent=true } 
#     buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
#     buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
#     buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
#     buf_set_keymap('n', 'gs', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
#     buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
#     buf_set_keymap('n', 'gx', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
#     buf_set_keymap('n', 'g[', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
#     buf_set_keymap('n', 'g]', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
#   end
#
#   -- require'lspconfig'.pylsp.setup{}
#
#   -- for nvim-lspinstall
#   require'lspinstall'.setup() 
#   local servers = require'lspinstall'.installed_servers()
#   for _, server in pairs(servers) do
#     require'lspconfig'[server].setup{}
#   end
# EOF
# '''
#
# [[plugins]]
# repo = 'kabouzeid/nvim-lspinstall'
# on_source = 'nvim-lspconfig'
# hook_source = '''
#   lua require'lspinstall'.setup()
# '''

# [[plugins]]
# repo = 'williamboman/nvim-lsp-installer'
